import os
import requests
from dotenv import load_dotenv
import telebot
import mysql.connector
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import re
from datetime import datetime

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

ADMIN_IDS = {1987008784, 1056385081, 756878264}

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL."""
    return mysql.connector.connect(
        host="db4free.net",
        user="vah9i_1",  # ‚Üê –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤–≤–æ–¥–∏–ª
        password=os.getenv("DB_PASSWORD"),
        database="ivanzolo_1"  # ‚Üê –∏–º—è —Ç–≤–æ–µ–π –±–∞–∑—ã
    )


user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def get_nickname_from_opendota(steam_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –∏–∑ OpenDota API –ø–æ Steam ID."""
    try:
        response = requests.get(f"https://api.opendota.com/api/players/{steam_id}")
        data = response.json()
        return data.get("profile", {}).get("personaname", None)
    except Exception:
        return None

def menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.row(
        KeyboardButton("üéÆ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"),
        KeyboardButton("üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
    )
    markup.row(
        KeyboardButton("üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä")
    )
    markup.row(
        KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
    )
    markup.row(
        KeyboardButton("üõ°Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    return markup

def admin_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    markup = menu_keyboard()  # –ù–∞—Å–ª–µ–¥—É–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    markup.row(
        KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤"),
        KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"),
        KeyboardButton("üìä –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã")
    )
    markup.row(
        KeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞"),
        KeyboardButton("üõ† –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
        KeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫")
    )
    return markup

def cancel_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return markup

def go_to_menu(chat_id, message_text=""):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_states.pop(chat_id, None)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message_text:
        bot.send_message(chat_id, message_text,
                         reply_markup=menu_keyboard() if chat_id not in ADMIN_IDS else admin_menu_keyboard())
    else:
        bot.send_message(chat_id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=menu_keyboard() if chat_id not in ADMIN_IDS else admin_menu_keyboard())

def escape_md(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!:\\,:'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback-–∫–Ω–æ–ø–æ–∫ ---

@bot.callback_query_handler(func=lambda call: call.data == "cancel_action")
def handle_inline_cancel(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'."""
    bot.answer_callback_query(call.id)
    go_to_menu(call.message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("update_") or call.data.startswith("pos_"))
def handle_user_callbacks(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–æ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏."""
    user_id = call.message.chat.id
    data = call.data

    if user_id not in user_states:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        go_to_menu(user_id)
        return

    state = user_states[user_id]
    bot.answer_callback_query(call.id)

    if data.startswith("update_"):
        field = data.replace("update_", "")
        state['update_field'] = field
        state['step'] = 'update_value'
        bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:", reply_markup=cancel_keyboard())

    elif data.startswith("pos_"):
        pos = int(data.replace("pos_", ""))
        state['pos'] = pos
        state['step'] = 'ask_mmr'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π MMR (0‚Äì16000):", reply_markup=cancel_keyboard())
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_edit_tournament_"))
def handle_admin_tournament_time_edit(call):
    user_id = call.message.chat.id
    tournament_name = call.data.replace("admin_edit_tournament_", "")
    bot.answer_callback_query(call.id)

    user_states[user_id] = {
        'step': 'admin_update_value',
        'update_field': 'registration_time',
        'target_tag': tournament_name
    }

    bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ *{escape_md(tournament_name)}* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD HH:MM`:",
                     parse_mode='MarkdownV2', reply_markup=cancel_keyboard())


@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_field_"))
def handle_admin_field_choice(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º."""
    user_id = call.message.chat.id
    field = call.data.replace("admin_field_", "")
    bot.answer_callback_query(call.id)

    if user_id not in user_states or 'target_tag' not in user_states[user_id]:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        go_to_menu(user_id)
        return

    user_states[user_id]['update_field'] = field
    user_states[user_id]['step'] = 'admin_update_value'
    bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_states[user_id]['target_tag']}:",
                     reply_markup=cancel_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_edit_tag_"))
def handle_admin_tag_choice(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º."""
    user_id = call.message.chat.id
    tag = call.data.replace("admin_edit_tag_", "")
    bot.answer_callback_query(call.id)

    user_states[user_id] = {'step': 'admin_update_field_choice', 'target_tag': tag}

    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("Steam ID", callback_data="admin_field_IDSTEM"),
        InlineKeyboardButton("–ù–∏–∫–Ω–µ–π–º", callback_data="admin_field_namestem")
    )
    markup.row(
        InlineKeyboardButton("–ü–æ–∑–∏—Ü–∏—è", callback_data="admin_field_POS"),
        InlineKeyboardButton("MMR", callback_data="admin_field_MMR")
    )
    markup.add(InlineKeyboardButton("Discord", callback_data="admin_field_Discord"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))

    bot.send_message(
        user_id,
        f"–í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç: *{escape_md(tag)}*\n–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=markup,
        parse_mode='MarkdownV2'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("join_tournament_"))
def handle_tournament_join(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä."""
    user_id = call.message.chat.id
    username = f"@{call.from_user.username}" if call.from_user.username else f"id{user_id}"
    tournament_id = int(call.data.replace("join_tournament_", ""))
    bot.answer_callback_query(call.id)

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [cite: 13]
        cursor.execute("SELECT COUNT(*) FROM acc WHERE ds = %s", (username,))
        if cursor.fetchone()[0] == 0:
            bot.send_message(user_id,
                             "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üéÆ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.")
            go_to_menu(user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä [cite: 14]
        cursor.execute("SELECT COUNT(*) FROM tournament_players WHERE player_ds = %s AND tournament_id = %s",
                       (username, tournament_id))
        if cursor.fetchone()[0] > 0:
            bot.send_message(user_id, "‚ùó –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.")
            go_to_menu(user_id)
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Ç—É—Ä–Ω–∏—Ä [cite: 15]
        cursor.execute("INSERT INTO tournament_players (tournament_id, player_ds) VALUES (%s, %s)",
                       (tournament_id, username))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ [cite: 16]
        cursor.execute("SELECT tournament FROM turnaments WHERE id = %s", (tournament_id,))
        tournament_name = cursor.fetchone()[0]

        bot.send_message(user_id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: *{escape_md(tournament_name)}*\\.",
                         parse_mode='MarkdownV2')
        go_to_menu(user_id)

    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: {e}")
        go_to_menu(user_id)
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("reply_"))
def handle_reply_to_support_request(call):
    user_id = call.message.chat.id
    if user_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    request_id = int(call.data.replace("reply_", ""))
    bot.answer_callback_query(call.id)

    user_states[user_id] = {'step': 'waiting_admin_reply', 'request_id': request_id}
    bot.send_message(user_id, f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}:", reply_markup=cancel_keyboard())

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(commands=['start', 'menu'])
def main_menu(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏ /menu, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_states.pop(message.chat.id, None)
    if message.chat.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_reply_buttons(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–Ω–æ–ø–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.chat.id
    text = message.text.strip()
    username = f"@{message.from_user.username}" if message.from_user.username else f"id{user_id}"

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        go_to_menu(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ "–¥–∏–∞–ª–æ–≥–µ" —Å –±–æ—Ç–æ–º
    if user_id in user_states:
        state = user_states[user_id]

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (–∞–¥–º–∏–Ω) [cite: 20]
        if state.get('step') == 'waiting_tournament_name':
            state['tournament_name'] = text
            state['step'] = 'waiting_tournament_time'
            bot.send_message(user_id, "üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")

        # –≠—Ç–∞–ø 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—É—Ä–Ω–∏—Ä–∞
        elif state.get('step') == 'waiting_tournament_time':
            tournament_name = state['tournament_name']
            start_time = text.strip()

            try:
                datetime.strptime(start_time, "%Y-%m-%d %H:%M")  # –≤–∞–ª–∏–¥–∞—Ü–∏—è

                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO turnaments (tournament, registration_time) VALUES (%s, %s)",
                    (tournament_name, start_time)
                )
                conn.commit()

                bot.send_message(user_id,
                                 f"‚úÖ –¢—É—Ä–Ω–∏—Ä *{escape_md(tournament_name)}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ *{escape_md(start_time)}*\\.",
                                 parse_mode="MarkdownV2")
                go_to_menu(user_id)

            except ValueError:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM")
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
                go_to_menu(user_id)
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ Steam ID (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) [cite: 22]
        if state.get('step') == 'ask_dota_id':
            if not text.isdigit():
                bot.send_message(user_id, "‚ùå Steam ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return

            steam_id = text
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM acc WHERE IDSTEM = %s", (steam_id,))
                if cursor.fetchone()[0] > 0:
                    bot.send_message(user_id, "‚ùå –≠—Ç–æ—Ç Steam ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
                    go_to_menu(user_id)
                    return
                cursor.execute("SELECT COUNT(*) FROM acc WHERE ds = %s", (username,))
                if cursor.fetchone()[0] > 0:
                    bot.send_message(user_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.")
                    go_to_menu(user_id)
                    return
                cursor.close()
                conn.close()
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Steam ID: {e}")
                go_to_menu(user_id)
                return

            nickname = get_nickname_from_opendota(steam_id)
            if not nickname:
                bot.send_message(user_id,
                                 f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Steam ID –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ Steam –æ—Ç–∫—Ä—ã—Ç: https://www.opendota.com/players/{steam_id}")
                return

            state['steam_id'] = steam_id
            state['namestem'] = nickname
            state['ds'] = username
            state['step'] = 'ask_pos'

            markup = InlineKeyboardMarkup()
            for i in range(1, 6):
                markup.add(InlineKeyboardButton(f"–ü–æ–∑–∏—Ü–∏—è {i}", callback_data=f"pos_{i}"))
            markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))
            bot.send_message(user_id, f"üîç –ù–∞–π–¥–µ–Ω –Ω–∏–∫: *{escape_md(nickname)}*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup,
                             parse_mode='MarkdownV2')
            return

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ MMR (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) [cite: 31]
        if state.get('step') == 'ask_mmr':
            if not text.isdigit() or not (0 <= int(text) <= 16000):
                bot.send_message(user_id, "‚ùå MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0‚Äì16000.")
                return
            state['mmr'] = int(text)
            state['step'] = 'ask_discord'
            bot.send_message(user_id, "üì® –í–≤–µ–¥–∏ —Å–≤–æ–π Discord (–ø—Ä–∏–º–µ—Ä: Player#1234):", reply_markup=cancel_keyboard())
            return

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ Discord (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) [cite: 32]
        if state.get('step') == 'ask_discord':
            state['discord'] = text
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO acc (IDSTEM, namestem, POS, MMR, ds, Discord) VALUES (%s, %s, %s, %s, %s, %s)",
                    (state['steam_id'], state['namestem'], state['pos'], state['mmr'], state['ds'], state['discord'])
                )
                conn.commit()
                bot.send_message(user_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                go_to_menu(user_id)
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                go_to_menu(user_id)
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()
            return

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ) [cite: 36]
        if state.get('step') == 'update_value':
            field = state['update_field']
            value = text
            tag = state['telegram_tag']

            if field == 'IDSTEM' and (not value.isdigit() or len(value) < 6):
                bot.send_message(user_id, "‚ùå Steam ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º.")
                return
            elif field == 'POS' and (not value.isdigit() or not (1 <= int(value) <= 5)):
                bot.send_message(user_id, "‚ùå –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
                return
            elif field == 'MMR' and (not value.isdigit() or not (0 <= int(value) <= 16000)):
                bot.send_message(user_id, "‚ùå MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 16000.")
                return
            elif field == 'namestem':
                new_nickname = get_nickname_from_opendota(value) if value.isdigit() else value
                if value.isdigit() and not new_nickname:
                    bot.send_message(user_id,
                                     f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏–∫ –ø–æ —ç—Ç–æ–º—É Steam ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Steam ID: https://www.opendota.com/players/{value}")
                    return
                value = new_nickname or value

            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute(f"UPDATE acc SET {field} = %s WHERE ds = %s", (value, tag))
                conn.commit()
                bot.send_message(user_id, f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {field} —Ç–µ–ø–µ—Ä—å *{escape_md(str(value))}*\\.",
                                 parse_mode='MarkdownV2')
                go_to_menu(user_id)
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                go_to_menu(user_id)
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()
            return

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ Discord (–±—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ) [cite: 44]
        if state.get('step') == 'set_discord':
            discord = text
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE acc SET Discord = %s WHERE ds = %s", (discord, username))
                conn.commit()
                bot.send_message(user_id, "‚úÖ Discord —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                go_to_menu(user_id)
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Discord: {e}")
                go_to_menu(user_id)
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()
            return

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∞–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è [cite: 47]
        if state.get('step') == 'admin_select_user_to_update':
            target_identifier = text.strip()
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("SELECT ds FROM acc WHERE ds = %s OR Discord = %s",
                               (target_identifier, target_identifier))
                result = cursor.fetchone()
                if result:
                    target_ds_tag = result[0]
                    user_states[user_id]['target_tag'] = target_ds_tag
                    user_states[user_id]['step'] = 'admin_update_field_choice'

                    markup = InlineKeyboardMarkup()
                    markup.row(
                        InlineKeyboardButton("Steam ID", callback_data="admin_field_IDSTEM"),
                        InlineKeyboardButton("–ù–∏–∫–Ω–µ–π–º", callback_data="admin_field_namestem")
                    )
                    markup.row(
                        InlineKeyboardButton("–ü–æ–∑–∏—Ü–∏—è", callback_data="admin_field_POS"),
                        InlineKeyboardButton("MMR", callback_data="admin_field_MMR")
                    )
                    markup.add(InlineKeyboardButton("Discord", callback_data="admin_field_Discord"))
                    markup.add(
                        InlineKeyboardButton("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞", callback_data="admin_field_registration_time"))

                    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))
                    bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{escape_md(target_ds_tag)}*\n–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                     reply_markup=markup, parse_mode='MarkdownV2')
                else:
                    bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Discord —Ç–µ–≥–æ–º –∏–ª–∏ Telegram @username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    go_to_menu(user_id)
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                go_to_menu(user_id)
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()
            return

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è [cite: 55]
        if state.get('step') == 'admin_update_value':
            field = state['update_field']
            tag = state['target_tag']
            value = text

            if field == 'IDSTEM' and (not value.isdigit() or len(value) < 6):
                bot.send_message(user_id, "‚ùå Steam ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º.")
                return
            elif field == 'POS' and (not value.isdigit() or not (1 <= int(value) <= 5)):
                bot.send_message(user_id, "‚ùå –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
                return
            elif field == 'MMR' and (not value.isdigit() or not (0 <= int(value) <= 16000)):
                bot.send_message(user_id, "‚ùå MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 16000.")
                return
            elif field == 'namestem':
                new_nickname = get_nickname_from_opendota(value) if value.isdigit() else value
                if value.isdigit() and not new_nickname:
                    bot.send_message(user_id,
                                     f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏–∫ –ø–æ —ç—Ç–æ–º—É Steam ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Steam ID: https://www.opendota.com/players/{value}")

                    return
                value = new_nickname or value
            elif field == 'registration_time':
                try:
                    datetime.strptime(value, "%Y-%m-%d %H:%M")
                except ValueError:
                    bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM")
                    return

                try:
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute(
                        "UPDATE turnaments SET registration_time = %s WHERE tournament = %s",
                        (value, tag)
                    )
                    conn.commit()
                    bot.send_message(user_id,
                                     f"‚úÖ –î–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ *{escape_md(tag)}* –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ *{escape_md(value)}*\\.",
                                     parse_mode='MarkdownV2')
                except Exception as e:
                    bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
                finally:
                    if 'conn' in locals() and conn.is_connected():
                        cursor.close()
                        conn.close()
                go_to_menu(user_id)
                return

            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute(f"UPDATE acc SET {field} = %s WHERE ds = %s", (value, tag))
                conn.commit()
                bot.send_message(user_id,
                                 f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *{escape_md(tag)}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {field} —Ç–µ–ø–µ—Ä—å *{escape_md(str(value))}*\\.",
                                 parse_mode='MarkdownV2')
                go_to_menu(user_id)
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                go_to_menu(user_id)
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()
            return

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É [cite: 64]
        if state.get('step') == "waiting_admin_reply":
            request_id = state['request_id']
            reply_text = text

            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE support_requests SET reply = %s, replied_at = NOW() WHERE id = %s",
                               (reply_text, request_id))
                conn.commit()

                # –ü–æ–ª—É—á–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –æ—Ç–≤–µ—Ç [cite: 66]
                cursor.execute("SELECT user_id FROM support_requests WHERE id = %s", (request_id,))
                client_id = cursor.fetchone()[0]

                bot.send_message(user_id, f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [cite: 67]
                    bot.send_message(client_id,
                                     f"üì¢ *–û—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{request_id}:*\n\n__{escape_md(reply_text)}__",
                                     parse_mode='MarkdownV2')
                except Exception as e:
                    bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")

            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É: {e}")
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()
                go_to_menu(user_id)
            return
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É [cite: 69]
        if state.get('step') == 'waiting_support_message':
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO support_requests (user_id, username, message, created_at) VALUES (%s, %s, %s, NOW())",
                    (user_id, username, text)
                )
                conn.commit()
                bot.send_message(user_id,
                                 "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
                go_to_menu(user_id)
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
                go_to_menu(user_id)
            finally:
                if 'conn' in locals() and conn.is_connected():
                    cursor.close()
                    conn.close()
            return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

    if text == "üéÆ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [cite: 74]
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM acc WHERE ds = %s", (username,))
            if cursor.fetchone()[0] > 0:
                bot.send_message(user_id, "‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.")
                go_to_menu(user_id)
                return
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            go_to_menu(user_id)
            return
        finally:
            if 'conn' in locals() and conn.is_connected():
                cursor.close()
                conn.close()

        user_states[user_id] = {'step': 'ask_dota_id'}
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Dota ID (–¶—ã—Ñ—Ä—ã –≤ –¥–æ—Ç–µ):", reply_markup=cancel_keyboard())


    elif text == "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç":
        try:
            conn = get_db_connection()
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ [cite: 78]
            cursor.execute("SELECT IDSTEM, namestem, POS, MMR, Discord FROM acc WHERE ds = %s", (username,))
            result = cursor.fetchone()

            # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [cite: 78]
            cursor.execute("""
                SELECT t.tournament 
                FROM tournament_players tp
                JOIN turnaments t ON tp.tournament_id = t.id
                WHERE tp.player_ds = %s
            """, (username,))
            tournament_rows = cursor.fetchall()

            tournaments_text = f"\nüìÖ {escape_md('–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.')}"
            # Default message
            if tournament_rows:
                tournaments = "\n".join(f"‚ñ´Ô∏è {escape_md(row[0])}" for row in tournament_rows)
                tournaments_text = f"\nüìÖ \\*–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö:\\*\n{tournaments}"

            if result:
                # Ensure all dynamic data is escaped
                steam_id_escaped = escape_md(str(result[0]))
                nickname_escaped = escape_md(result[1])
                pos_escaped = escape_md(str(result[2]))
                mmr_escaped = escape_md(str(result[3]))
                discord_escaped = escape_md(result[4] or "–ù–µ —É–∫–∞–∑–∞–Ω")

                bot.send_message(user_id,
                                 f"""üë§ *–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç:*\nSteam ID: `{steam_id_escaped}`\n–ù–∏–∫–Ω–µ–π–º: *{nickname_escaped}*\n–ü–æ–∑–∏—Ü–∏—è: `{pos_escaped}`\nMMR: `{mmr_escaped}`\nDiscord: `{discord_escaped}`{tournaments_text}""",
                                 parse_mode='MarkdownV2')
            else:
                bot.send_message(user_id,
                                 "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üéÆ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.")

        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        finally:
            if 'conn' in locals() and conn.is_connected():
                cursor.close()
                conn.close()
        go_to_menu(user_id)


    elif text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã":
        show_tournaments(message)

    elif text == "üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä":
        choose_tournament(message)

    elif text == "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤":
        view_players(message)

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä" and user_id in ADMIN_IDS:
        user_states[user_id] = {'step': 'waiting_tournament_name'}
        bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:", reply_markup=cancel_keyboard())
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä" and user_id not in ADMIN_IDS:
        bot.send_message(user_id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        go_to_menu(user_id)

    elif text == "üìä –ó–∞–ø–∏—Å–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã":
        show_tournament_entries(message)

    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ [cite: 86]
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM acc WHERE ds = %s", (username,))
            if cursor.fetchone()[0] == 0:
                bot.send_message(user_id, "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
                go_to_menu(user_id)
                return
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            go_to_menu(user_id)
            return
        finally:
            if 'conn' in locals() and conn.is_connected():
                cursor.close()
                conn.close()

        user_states[user_id] = {
            'step': 'update_choice',
            'telegram_tag': username
        }
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å Steam ID", callback_data="update_IDSTEM"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data="update_namestem")
        )
        markup.row(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="update_POS"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å MMR", callback_data="update_MMR")
        )
        markup.row(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å Discord", callback_data="update_Discord")
        )
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)

    elif text == "üõ† –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and user_id in ADMIN_IDS:
        user_states[user_id] = {'step': 'admin_select_user_to_update'}
        bot.send_message(user_id,
                         "‚öôÔ∏è –ö–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ *Discord —Ç–µ–≥* –∏–ª–∏ *Telegram @username* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                         reply_markup=cancel_keyboard(), parse_mode='MarkdownV2')
    elif text == "üõ† –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and user_id not in ADMIN_IDS:
        bot.send_message(user_id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        go_to_menu(user_id)

    elif text == "üõ°Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        support_request(message)

    elif text == "üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫":
        show_support_requests(message)

    elif text == "üí¨ –£–∫–∞–∑–∞—Ç—å Discord":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [cite: 92]
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM acc WHERE ds = %s", (username,))
            if cursor.fetchone()[0] == 0:
                bot.send_message(user_id, "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
                go_to_menu(user_id)
                return
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            go_to_menu(user_id)
            return
        finally:
            if 'conn' in locals() and conn.is_connected():
                cursor.close()
                conn.close()

        user_states[user_id] = {
            'step': 'set_discord',
            'telegram_tag': username
        }
        bot.send_message(user_id, "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π Discord :", reply_markup=cancel_keyboard())
    elif text == "‚è± –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞" and user_id in ADMIN_IDS:
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT tournament FROM turnaments")
            tournaments = cursor.fetchall()
            if not tournaments:
                bot.send_message(user_id, "‚õî –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return

            markup = InlineKeyboardMarkup()
            for (name,) in tournaments:
                markup.add(InlineKeyboardButton(name, callback_data=f"admin_edit_tournament_{name}"))
            markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))

            bot.send_message(user_id, "üïí –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã:", reply_markup=markup)

        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            if 'conn' in locals() and conn.is_connected():
                cursor.close()
                conn.close()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def view_players(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        go_to_menu(message.chat.id)
        return
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT IDSTEM, namestem, POS, MMR, ds, Discord FROM acc")
        rows = cursor.fetchall()

        if not rows:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
        else:
            response_text = "*–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:*\n\n"
            for row in rows:
                response_text += f"""üë§ –ò–≥—Ä–æ–∫: `{escape_md(row[4])}`
Steam ID: `{escape_md(str(row[0]))}`
–ù–∏–∫: *{escape_md(row[1])}*
–ü–æ–∑–∏—Ü–∏—è: `{escape_md(str(row[2]))}`
MMR: `{escape_md(str(row[3]))}`
Discord: `{escape_md(row[5] or "–ù–µ —É–∫–∞–∑–∞–Ω")}`\n\n"""
            bot.send_message(message.chat.id, response_text, parse_mode='MarkdownV2')

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
        go_to_menu(message.chat.id)


def show_tournaments(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤."""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT tournament FROM turnaments")
        rows = cursor.fetchall()

        if not rows:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        else:
            text = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:*\n\n" + "\n".join(f"‚Ä¢ *{escape_md(row[0])}*" for row in rows)
            bot.send_message(message.chat.id, text, parse_mode='MarkdownV2')

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
        go_to_menu(message.chat.id)


def show_support_requests(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        go_to_menu(message.chat.id)
        return
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, username, message, created_at FROM support_requests WHERE reply IS NULL ORDER BY created_at DESC LIMIT 10")
        rows = cursor.fetchall()

        if not rows:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.")
        else:
            bot.send_message(message.chat.id, "*–°–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:*\n", parse_mode='MarkdownV2')
            for row in rows:
                bot.send_message(
                    message.chat.id,
                    f"üÜî \\#{escape_md(str(row[0]))}\nüë§ `{escape_md(row[1])}`\nüí¨ _{escape_md(row[2])}_\nüïí {escape_md(row[3].strftime('%d.%m.%Y %H:%M'))}",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton(f"‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å \\#{escape_md(str(row[0]))}",
                                             callback_data=f"reply_{row[0]}")
                    ),
                    parse_mode='MarkdownV2'
                )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
        go_to_menu(message.chat.id)


def support_request(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É."""
    user_id = message.chat.id
    user_states[user_id] = {'step': 'waiting_support_message'}
    bot.send_message(user_id, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:",
                     reply_markup=cancel_keyboard())


def choose_tournament(message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, tournament FROM turnaments")
        tournaments = cursor.fetchall()

        if not tournaments:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
            go_to_menu(message.chat.id)
            return

        markup = InlineKeyboardMarkup()
        cursor.execute("SELECT id, tournament, registration_time FROM turnaments")
        tournaments = cursor.fetchall()

        for t_id, name, time in tournaments:
            time_str = time.strftime('%Y-%m-%d %H:%M') if time else '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'
            display_text = f"{name} ({time_str})"
            markup.add(InlineKeyboardButton(display_text, callback_data=f"join_tournament_{t_id}"))

        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))
        bot.send_message(message.chat.id, "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()

def show_tournament_entries(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–∞–∂–¥—ã–π —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        go_to_menu(message.chat.id)
        return

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã [cite: 109]
        cursor.execute("SELECT id, tournament FROM turnaments")
        tournaments = cursor.fetchall()

        if not tournaments:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
            return

        for t_id, name in tournaments:
            cursor.execute("SELECT player_ds FROM tournament_players WHERE tournament_id = %s", (t_id,))
            players = cursor.fetchall()
            player_list = "\n".join(f"\\- {escape_md(p[0])}" for p in players) # Ensure player names are escaped

            if not player_list:
                player_list = "_–ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è_"

            bot.send_message(
                message.chat.id,
                f"üìä *{escape_md(name)}*\n{player_list}", # Ensure tournament name is escaped here too
                parse_mode='MarkdownV2'
            )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
        go_to_menu(message.chat.id)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    bot.infinity_polling()